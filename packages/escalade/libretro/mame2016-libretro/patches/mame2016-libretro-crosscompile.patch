--- a/3rdparty/genie/build/gmake.linux/genie.make	2018-08-11 00:17:44.000000000 +0200
+++ b/3rdparty/genie/build/gmake.linux/genie.make	2019-04-03 11:57:27.671223016 +0200
@@ -28,8 +28,8 @@
   RM    = $(SILENT) del /F "$(subst /,\\,$(1))" 2> nul || exit 0
 endif
 
-CC  = gcc
-CXX = g++
+CC  = $(HOST_CC)
+CXX = $(HOST_CXX)
 AR  = ar
 
 ifndef RESCOMP
@@ -47,11 +47,11 @@
   DEFINES   += -DNDEBUG -DLUA_COMPAT_MODULE -DLUA_USE_POSIX -DLUA_USE_DLOPEN
   INCLUDES  += -I../../src/host/lua-5.3.0/src
   ALL_CPPFLAGS  += $(CPPFLAGS) -MMD -MP -MP $(DEFINES) $(INCLUDES)
-  ALL_CFLAGS    += $(CFLAGS) $(ALL_CPPFLAGS) $(ARCH) -Wall -Wextra -Os
-  ALL_CXXFLAGS  += $(CXXFLAGS) $(CFLAGS) $(ALL_CPPFLAGS) $(ARCH) -Wall -Wextra -Os
-  ALL_OBJCFLAGS += $(CXXFLAGS) $(CFLAGS) $(ALL_CPPFLAGS) $(ARCH) -Wall -Wextra -Os
+  ALL_CFLAGS    += $(ALL_CPPFLAGS) $(ARCH) -Wall -Wextra -Os
+  ALL_CXXFLAGS  += $(ALL_CPPFLAGS) $(ARCH) -Wall -Wextra -Os
+  ALL_OBJCFLAGS += $(ALL_CPPFLAGS) $(ARCH) -Wall -Wextra -Os
   ALL_RESFLAGS  += $(RESFLAGS) $(DEFINES) $(INCLUDES)
-  ALL_LDFLAGS   += $(LDFLAGS) -L. -s -rdynamic
+  ALL_LDFLAGS   += -L. -s -rdynamic
   LDDEPS    +=
   LIBS      += $(LDDEPS) -ldl -lm
   EXTERNAL_LIBS +=
--- a/scripts/toolchain.lua	2019-04-03 12:13:08.556919475 +0200
+++ b/scripts/toolchain.lua	2019-04-03 12:13:43.323043587 +0200
@@ -675,9 +675,6 @@
 
 	configuration { "linux-gcc", "x32" }
 		objdir (_buildDir .. "linux_gcc" .. "/obj")
-		buildoptions {
-			"-m32",
-		}
 
 	configuration { "linux-gcc", "x32", "Release" }
 		targetdir (_buildDir .. "linux_gcc" .. "/bin/x32/Release")
--- a/3rdparty/genie/src/host/scripts.c	2019-04-03 12:30:33.272654617 +0200
+++ b/3rdparty/genie/src/host/scripts.c	2019-04-03 12:30:12.892921812 +0200
@@ -131,7 +131,7 @@
 	"gs(cfg)\nlocal result = table.translate(cfg.flags, flags)\nreturn result\nend\nfunction premake.dotnet.getkind(cfg)\nif (cfg.kind == \"ConsoleApp\") then\nreturn \"Exe\"\nelseif (cfg.kind == \"WindowedApp\") then\nreturn \"WinExe\"\nelseif (cfg.kind == \"SharedLib\") then\nreturn \"Library\"\nend\nend",
 
 	/* tools/gcc.lua */
-	"premake.gcc = { }\npremake.gcc.cc     = \"gcc\"\npremake.gcc.cxx    = \"g++\"\npremake.gcc.ar     = \"ar\"\npremake.gcc.llvm   = false\nlocal cflags =\n{\nEnableSSE      = \"-msse\",\nEnableSSE2     = \"-msse2\",\nEnableAVX      = \"-mavx\",\nEnableAVX2     = \"-mavx2\",\nExtraWarnings  = \"-Wall -Wextra\",\nFatalWarnings  = \"-Werror\",\nFloatFast      = \"-ffast-math\",\nFloatStrict    = \"-ffloat-store\",\nNoFramePointer = \"-fomit-frame-pointer\",\nOptimize       = \"-O2\",\nOptimizeSize   = \"-Os\",\nOptimizeSpeed  = \"-O3\",\nSymbols        = \"-g\",\n}\nlocal cxxflags =\n{\nNoExceptions   = \"-fno-exceptions\",\nNoRTTI         = \"-fno-rtti\",\nUnsignedChar   = \"-funsigned-char\",\n}\npremake.gcc.platforms =\n{\nNative = {\ncppflags = \"-MMD -MP\",\n},\nx32 = {\ncppflags = \"-MMD -MP\",\nflags    = \"-m32\",\n},\nx64 = {\ncppflags = \"-MMD -MP\",\nflags    = \"-m64\",\n},\nUniversal = {\nar       = \"libtool\",\ncppflags = \"-MMD -MP\",\nflags    = \"-arch i386 -arch x86_64 -arch ppc -arch ppc64\",\n},"
+	"premake.gcc = { }\npremake.gcc.cc     = \"gcc\"\npremake.gcc.cxx    = \"g++\"\npremake.gcc.ar     = \"ar\"\npremake.gcc.llvm   = false\nlocal cflags =\n{\nEnableSSE      = \"-msse\",\nEnableSSE2     = \"-msse2\",\nEnableAVX      = \"-mavx\",\nEnableAVX2     = \"-mavx2\",\nExtraWarnings  = \"-Wall -Wextra\",\nFatalWarnings  = \"-Werror\",\nFloatFast      = \"-ffast-math\",\nFloatStrict    = \"-ffloat-store\",\nNoFramePointer = \"-fomit-frame-pointer\",\nOptimize       = \"-O2\",\nOptimizeSize   = \"-Os\",\nOptimizeSpeed  = \"-O3\",\nSymbols        = \"-g\",\n}\nlocal cxxflags =\n{\nNoExceptions   = \"-fno-exceptions\",\nNoRTTI         = \"-fno-rtti\",\nUnsignedChar   = \"-funsigned-char\",\n}\npremake.gcc.platforms =\n{\nNative = {\ncppflags = \"-MMD -MP\",\n},\nx32 = {\ncppflags = \"-MMD -MP\",\n},\nx64 = {\ncppflags = \"-MMD -MP\",\nflags    = \"-m64\",\n},\nUniversal = {\nar       = \"libtool\",\ncppflags = \"-MMD -MP\",\nflags    = \"-arch i386 -arch x86_64 -arch ppc -arch ppc64\",\n},"
 	"\nUniversal32 = {\nar       = \"libtool\",\ncppflags = \"-MMD -MP\",\nflags    = \"-arch i386 -arch ppc\",\n},\nUniversal64 = {\nar       = \"libtool\",\ncppflags = \"-MMD -MP\",\nflags    = \"-arch x86_64 -arch ppc64\",\n},\nPS3 = {\ncc         = \"ppu-lv2-g++\",\ncxx        = \"ppu-lv2-g++\",\nar         = \"ppu-lv2-ar\",\ncppflags   = \"-MMD -MP\",\n},\nWiiDev = {\ncppflags    = \"-MMD -MP -I$(LIBOGC_INC) $(MACHDEP)\",\nldflags= \"-L$(LIBOGC_LIB) $(MACHDEP)\",\ncfgsettings = [[\n  ifeq ($(strip $(DEVKITPPC)),)\n    $(error \"DEVKITPPC environment variable is not set\")'\n  endif\n  include $(DEVKITPPC)/wii_rules']],\n},\nOrbis = {\ncc         = \"orbis-clang\",\ncxx        = \"orbis-clang++\",\nar         = \"orbis-ar\",\ncppflags   = \"-MMD -MP\",\n}\n}\nlocal platforms = premake.gcc.platforms\nfunction premake.gcc.getcppflags(cfg)\nlocal flags = { }\ntable.insert(flags, platforms[cfg.platform].cppflags)\nif flags[1]:startswith(\"-MMD\") then\ntable.insert(flags, \"-MP\")\nend\nreturn flags\nend\nfunction "
 	"premake.gcc.getcflags(cfg)\nlocal result = table.translate(cfg.flags, cflags)\ntable.insert(result, platforms[cfg.platform].flags)\nif cfg.system ~= \"windows\" and cfg.kind == \"SharedLib\" then\ntable.insert(result, \"-fPIC\")\nend\nreturn result\nend\nfunction premake.gcc.getcxxflags(cfg)\nlocal result = table.translate(cfg.flags, cxxflags)\nreturn result\nend\nfunction premake.gcc.getldflags(cfg)\nlocal result = { }\nif not cfg.flags.Symbols then\nif cfg.system == \"macosx\" then\nelse\ntable.insert(result, \"-s\")\nend\nend\nif cfg.kind == \"SharedLib\" then\nif cfg.system == \"macosx\" then\ntable.insert(result, \"-dynamiclib\")\nelse\ntable.insert(result, \"-shared\")\nend\nif cfg.system == \"windows\" and not cfg.flags.NoImportLib then\ntable.insert(result, '-Wl,--out-implib=\"' .. cfg.linktarget.fullpath .. '\"')\nend\nend\nif cfg.kind == \"WindowedApp\" and cfg.system == \"windows\" then\ntable.insert(result, \"-mwindows\")\nend\nlocal platform = platforms[cfg.platform]\ntable.insert(result, platform"
 	".flags)\ntable.insert(result, platform.ldflags)\nreturn result\nend\nfunction premake.gcc.getlibdirflags(cfg)\nlocal result = { }\nfor _, value in ipairs(premake.getlinks(cfg, \"all\", \"directory\")) do\ntable.insert(result, '-L' .. _MAKE.esc(value))\nend\nreturn result\nend\nfunction premake.gcc.islibfile(p)\nif path.getextension(p) == \".a\" then\nreturn true\nend\nreturn false\nend\nfunction premake.gcc.getlibfiles(cfg)\nlocal result = {}\nfor _, value in ipairs(premake.getlinks(cfg, \"system\", \"fullpath\")) do\nif premake.gcc.islibfile(value) then\ntable.insert(result, _MAKE.esc(value))\nend\nend\nreturn result\nend\nfunction premake.gcc.getlinkflags(cfg)\nlocal result = {}\nfor _, value in ipairs(premake.getlinks(cfg, \"system\", \"fullpath\")) do\nif premake.gcc.islibfile(value) then\ntable.insert(result, _MAKE.esc(value))\nelseif path.getextension(value) == \".framework\" then\ntable.insert(result, '-framework ' .. _MAKE.esc(path.getbasename(value)))\nelse\ntable.insert(result, '-l' .. _MAKE.esc(path"
--- a/scripts/src/3rdparty.lua	2019-04-03 12:25:01.563596462 +0200
+++ b/scripts/src/3rdparty.lua	2019-04-03 12:26:04.642800102 +0200
@@ -717,161 +717,6 @@
 -- BGFX library objects
 --------------------------------------------------
 
-project "bgfx"
-	uuid "d3e7e119-35cf-4f4f-aba0-d3bdcd1b879a"
-	kind "StaticLib"
-
-	configuration { "vs*" }
-		buildoptions {
-			"/wd4324", -- warning C4324: 'xxx' : structure was padded due to __declspec(align())
-			"/wd4244", -- warning C4244: 'argument' : conversion from 'xxx' to 'xxx', possible loss of data
-			"/wd4611", -- warning C4611: interaction between '_setjmp' and C++ object destruction is non-portable
-			"/wd4310", -- warning C4310: cast truncates constant value
-		}
-if _OPTIONS["vs"]=="intel-15" then
-		buildoptions {
-			"/Qwd906",              -- message #906: effect of this "#pragma pack" directive is local to function "xxx"
-			"/Qwd1879",             -- warning #1879: unimplemented pragma ignored
-			"/Qwd82",               -- remark #82: storage class is not first
-		}
-end
-	configuration { }
-
-	includedirs {
-		MAME_DIR .. "3rdparty/bgfx/include",
-		MAME_DIR .. "3rdparty/bgfx/3rdparty",
-		MAME_DIR .. "3rdparty/bx/include",
-		MAME_DIR .. "3rdparty/bgfx/3rdparty/dxsdk/include",
-	}
-
-	configuration { "not steamlink"}
-		includedirs {
-			MAME_DIR .. "3rdparty/bgfx/3rdparty/khronos",
-		}
-
-	configuration { "android-*"}
-		buildoptions {
-			"-Wno-macro-redefined",
-		}
-
-	configuration { "vs*" }
-		includedirs {
-			MAME_DIR .. "3rdparty/bx/include/compat/msvc",
-		}
-	configuration { "mingw*" }
-		includedirs {
-			MAME_DIR .. "3rdparty/bx/include/compat/mingw",
-		}
-
-	configuration { "osx* or xcode4" }
-		includedirs {
-			MAME_DIR .. "3rdparty/bx/include/compat/osx",
-		}
-
-	configuration { "freebsd" }
-		includedirs {
-			MAME_DIR .. "3rdparty/bx/include/compat/freebsd",
-		}
-
-	configuration { "netbsd" }
-		includedirs {
-			MAME_DIR .. "3rdparty/bx/include/compat/freebsd",
-		}
-
-	configuration { "gmake" }
-		buildoptions {
-			"-Wno-uninitialized",
-			"-Wno-unused-function",
-			"-Wno-unused-but-set-variable",
-		}
-	configuration { "rpi" }
-		buildoptions {
-			"-Wno-unused-but-set-variable",
-			"-Wno-unused-variable",
-		}
-		defines {
-			"__STDC_VERSION__=199901L",
-		}
-
-	configuration { }
-
-	if _OPTIONS["targetos"]=="windows" then
-		local version = str_to_version(_OPTIONS["gcc_version"])
-		if _OPTIONS["gcc"]~=nil and string.find(_OPTIONS["gcc"], "clang") then
-			buildoptions {
-				"-Wno-unknown-attributes",
-				"-Wno-missing-braces",
-				"-Wno-int-to-pointer-cast",
-			}
-		end
-	end
-
-	if _OPTIONS["targetos"]=="macosx" then
-		local version = str_to_version(_OPTIONS["gcc_version"])
-		if _OPTIONS["gcc"]~=nil and string.find(_OPTIONS["gcc"], "clang") then
-			buildoptions {
-				"-Wno-switch",
-				"-Wno-unknown-pragmas",
-			}
-		end
-	end
-
-	defines {
-		"__STDC_LIMIT_MACROS",
-		"__STDC_FORMAT_MACROS",
-		"__STDC_CONSTANT_MACROS",
-		"BGFX_CONFIG_MAX_FRAME_BUFFERS=128",
-	}
-	files {
-		MAME_DIR .. "3rdparty/bgfx/src/bgfx.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/glcontext_egl.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/glcontext_glx.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/glcontext_ppapi.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/glcontext_wgl.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/image.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/hmd_ovr.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/hmd_openvr.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/renderer_d3d12.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/renderer_d3d11.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/renderer_d3d9.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/renderer_gl.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/renderer_null.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/renderer_vk.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/debug_renderdoc.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/shader.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/shader_dxbc.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/shader_dx9bc.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/shader_spirv.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/topology.cpp",
-		MAME_DIR .. "3rdparty/bgfx/src/vertexdecl.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/bgfx_utils.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/bounds.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/camera.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/cube_atlas.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/font/font_manager.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/font/text_buffer_manager.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/font/text_metrics.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/font/utf8.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/imgui/imgui.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/imgui/ocornut_imgui.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/imgui/scintilla.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/nanovg/nanovg.cpp",
-		MAME_DIR .. "3rdparty/bgfx/examples/common/nanovg/nanovg_bgfx.cpp",
-		MAME_DIR .. "3rdparty/bgfx/3rdparty/ib-compress/indexbuffercompression.cpp",
-		MAME_DIR .. "3rdparty/bgfx/3rdparty/ib-compress/indexbufferdecompression.cpp",
-		MAME_DIR .. "3rdparty/bgfx/3rdparty/ocornut-imgui/imgui.cpp",
-		MAME_DIR .. "3rdparty/bgfx/3rdparty/ocornut-imgui/imgui_demo.cpp",
-		MAME_DIR .. "3rdparty/bgfx/3rdparty/ocornut-imgui/imgui_draw.cpp",
-		MAME_DIR .. "3rdparty/bgfx/3rdparty/ocornut-imgui/imgui_node_graph_test.cpp",
-		MAME_DIR .. "3rdparty/bgfx/3rdparty/ocornut-imgui/imgui_wm.cpp",
-	}
-	if _OPTIONS["targetos"]=="macosx" then
-		files {
-			MAME_DIR .. "3rdparty/bgfx/src/glcontext_eagl.mm",
-			MAME_DIR .. "3rdparty/bgfx/src/glcontext_nsgl.mm",
-			MAME_DIR .. "3rdparty/bgfx/src/renderer_mtl.mm",
-		}
-	end
 
 --------------------------------------------------
 -- PortAudio library objects
--- a/scripts/src/main.lua	2018-08-11 00:17:44.000000000 +0200
+++ b/scripts/src/main.lua	2019-04-03 14:19:16.070315112 +0200
@@ -295,7 +295,6 @@
 		}
 	end
 	links {
-		"bgfx",
 		"ocore_" .. _OPTIONS["osd"],
 	}
 
